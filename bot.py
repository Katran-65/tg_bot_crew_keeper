import logging
import random
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import datetime
# Убрали ненужный импорт sqlite3
from typing import Dict, Tuple

# Настройка логирования
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = "8217389924:AAGx0JqHebI9y26bPPwSACaOByR9wza8LDk"

# Расширенный словарь ответов
RESPONSES = {
    "Манчестер": ["Манчестер синий", "Если щас опять начнется противостояние МЮ, Челси и Ливерпуля, я уйду спать!",
                  "Надоели"],
    "манчестер": ["Манчестер синий", "Если щас опять начнется противостояние МЮ, Челси и Ливерпуля, я уйду спать!",
                  "Надоели"],
    "Челси": ["Опять о своём футболе базарят", "скуууушноооо", "опяяяяять!"],
    "Душнить": ["Откройте форточку", "Зануда)", "кубок зануд уже твой, забей"],
    "челси": ["Опять о своём футболе базарят", "скуууушноооо"],
    "душнить": ["Откройте форточку", "Зануда)", "кубок зануд уже твой, забей"],
    "душни": ["Откройте форточку", "Зануда)", "кубок зануд уже твой, забей"],
    "душно": ["Откройте форточку", "Зануда)", "кубок зануд уже твой, забей"],
    "душните": ["Откройте форточку", "Зануда)", "кубок зануд уже твой, забей"],
    "Феникс": ["Феникскскскс", "мы командо. футболето проиграто неудачо. Мы играем забиваем умираем. мы фениксо. любим катю лену таню пиццу"],
    "феникс": ["Феникскскскс", "мы командо. футболето проиграто неудачо. Мы играем забиваем умираем. мы фениксо. любим катю лену таню пиццу"],
    "похмелье": ["меньше надо было пить", "а кто в этом виноват?", "кря(", "соболезную"],
    "похмелья": ["меньше надо было пить", "а кто в этом виноват?", "кря(", "соболезную"],
    "анекдот": ["Анекдот? Про нюанс?", "ВНИМАНИЕ АНЕКДОТ", "Однажды гидролог и геолог встретились в пабе..."],
    "анекдоты": ["Анекдот? Про нюанс?", "ВНИМАНИЕ АНЕКДОТ", "Однажды гидролог и геолог встретились в пабе..."],
    "Похмелье": ["меньше надо было пить", "а кто в этом виноват?", "кря(", "соболезную"],
    "Похмелья": ["меньше надо было пить", "а кто в этом виноват?", "кря(", "соболезную"],
    "Анекдот": ["Анекдот? Про нюанс?", "ВНИМАНИЕ АНЕКДОТ", "Однажды гидролог и геолог встретились в пабе..."],
    "Анекдоты": ["Анекдот? Про нюанс?", "ВНИМАНИЕ АНЕКДОТ", "Однажды гидролог и геолог встретились в пабе..."],
    "пиво": ["Пей пиво, ешь мясо", "Щас вообще не удивительно что в чате Бухлоход разговор о пиве", "Когда бухать?"],
    "Пиво": ["Пей пиво, ешь мясо", "Щас вообще не удивительно что в чате Бухлоход разговор о пиве", "Когда бухать?"],
    "пива": ["Пей пиво, ешь мясо", "Щас вообще не удивительно что в чате Бухлоход разговор о пиве", "Когда бухать?"],
    "Пива": ["Пей пиво, ешь мясо", "Щас вообще не удивительно что в чате Бухлоход разговор о пиве", "Когда бухать?"],
    "тролл": ["Все вы тут тролли", "вы когда-нибудь слышали о мумитроллинге?", "шутеечки?"],
    "Тролл": ["Все вы тут тролли", "вы когда-нибудь слышали о мумитроллинге?", "шутеечки?"],
    "Лиза": ["Лиза - мой любимы персонаж в этом чате", "елизавееета жила в краснодареее", "джин?"],
    "лиза": ["Лиза - мой любимы персонаж в этом чате", "елизавееета жила в краснодареее", "джин?"],
    "Лизу": ["Лиза - мой любимы персонаж в этом чате", "елизавееета жила в краснодареее", "джин?"],
    "лизу": ["Лиза - мой любимы персонаж в этом чате", "елизавееета жила в краснодареее", "джин?"],
    "Лизе": ["Лиза - мой любимы персонаж в этом чате", "елизавееета жила в краснодареее", "джин?"],
    "лизе": ["Лиза - мой любимы персонаж в этом чате", "елизавееета жила в краснодареее", "джин?"],
    "Лизы": ["Лиза - мой любимы персонаж в этом чате", "елизавееета жила в краснодареее", "джин?"],
    "лизы": ["Лиза - мой любимы персонаж в этом чате", "елизавееета жила в краснодареее", "джин?"],
    "Katran": ["Обращаться к Екатерине через личного секретаря", "екатерина вне зоны действия сети, отправьте свое сообщение в чате сбербанка", "катран - это акула кстати"],
    "enel": ["Че вам надо от Лены? ацтаньте от человека в токое время", "у аппарата Елена Алексеевна, говорите", "Для получения справочной информации от Enel зайдите в бар"],
    "TatyanaShumilova": ["Татьяна будет на связи через полчаса. А если нет, то перечитайте это сообщение.", "Ищу аналитиков, присылайте резюме", "она на даче..."],
    "Ekaterina_K_": ["в рамке защищает честь фениксо, перезвоните позжеее", "Чуть что сразу Катя, что не спросишь - Катя", "Катя мчит, чтобы ответить на ваш запрос"]
}

# База интересных вопросов
QUESTIONS = [
    "Какая книга изменила твою жизнь и почему?",
    "Если бы у тебя был суперсила на один день, что бы ты выбрал и как бы использовал?",
    "Какой самый безумный поступок ты совершил в жизни?",
    "Какой фильм ты можешь пересматривать бесконечно?",
    "Если бы ты мог поужинать с любым человеком из истории, кого бы выбрал и о чем бы спросил?",
    "Какое твое самое странное умение или талант?",
    "Какой самый неловкий момент случился с тобой на свидании?",
    "Если бы ты узнал, что завтра конец света, как бы провел сегодняшний день?",
    "Какая песня заставляет тебя плакать или смеяться без причины?",
    "Какой самый лучший совет тебе давали в жизни?",
    "Если бы ты мог жить в любой вымышленной вселенной, какую бы выбрал?",
    "Какое твое самое детское воспоминание?",
    "Если бы ты мог изменить одну вещь в своем прошлом, что бы это было?",
    "Какой самый необычный сон тебе снился?",
    "Если бы ты стал знаменитым, что бы ты хотел, чтобы о тебе помнили?",
    "Какое блюдо ты считаешь своим кулинарным шедевром?",
    "Если бы животные могли говорить, с каким бы ты хотел поболтать?",
    "Какой самый красивый уголок природы, где ты бывал?",
    "Если бы ты мог мгновенно выучить любой язык, какой бы выбрал?",
    "Какая шутка или анекдот всегда заставляет тебя смеяться?",
    "Если бы ты мог вернуться в любой возраст, какой бы выбрал и почему?",
    "Какой самый ценный жизненный урок ты усвоил?",
    "Если бы ты мог создать новый праздник, каким бы он был?",
    "Какая компьютерная игра затянула тебя больше всего?",
    "Если бы ты мог решить одну мировую проблему, какую бы выбрал?",
    "Какой самый странный предмет в твоей коллекции?",
    "Если бы ты мог быть экспертом в любой области, какой бы выбрал?",
    "Какое твое самое большое иррациональное страдание?",
    "Если бы ты мог получить ответ на любой вопрос, что бы спросил?",
    "Какой самый неожиданный комплимент ты получал?",
    "Если бы ты мог поменяться местами с кем-то на неделю, с кем бы?",
    "Какая самая безумная вещь в твоем списке желаний?",
    "Если бы ты мог создать духи с любым запахом, каким бы он был?",
    "Какой самый смешной случай из твоей школьной жизни?",
    "Если бы ты мог добавить любую эмоцию в палитру человеческих чувств, какую бы создал?",
    "Какое твое самое странное пищевое сочетание, которое ты обожаешь?",
    "Если бы ты мог стать персонажем любого фильма, кем бы стал?",
    "Какой самый нелепый спор у тебя был в жизни?",
    "Если бы ты мог знать абсолютную истину об одной вещи, что бы это было?",
    "Какая самая странная вещь, которая тебя впечатлила?",
    "Если бы ты мог иметь любое животное в качестве питомца, какое бы выбрал?",
    "Какой самый запоминающийся подарок ты получал?",
    "Если бы ты мог изобрети что-то полезное для человечества, что бы это было?",
    "Какая самая смешная опечатка или автоисправление у тебя была?",
    "Если бы ты мог жить в любом десятилетии 20 века, какое бы выбрал?"
]

# База комплиментов
COMPLIMENTS = [
    "Ты сегодня просто сияешь! ✨",
    "У тебя отличное чувство юмора! 😄",
    "С тобой всегда так приятно общаться! 💫",
    "Ты невероятно умён! 🧠",
    "Твоя энергия заразительна! ⚡",
    "У тебя прекрасный вкус! 👌",
    "Ты вдохновляешь окружающих! 🌟",
    "С тобой никогда не скучно! 🎉",
    "Ты мастерски подбираешь слова! 💬",
    "У тебя потрясающая харизма! 🔥",
    "Ты всегда находишь нужные слова! 📝",
    "С тобой приятно иметь дело! 🤝",
    "Ты излучаешь позитив! ☀️",
    "У тебя уникальный взгляд на вещи! 👁️",
    "Ты делаешь мир лучше! 🌍",
    "С тобой можно говорить на любые темы! 💭",
    "Ты всегда поднимаешь настроение! 😊",
    "У тебя золотые руки! 👐",
    "Ты прекрасный собеседник! 🗣️",
    "С тобой хочется делиться идеями! 💡"
]

# База ответов "Да"
YES_RESPONSES = [
    "Абсолютно да! ✅",
    "Безусловно! 👍",
    "Сто процентов! 💯",
    "Не сомневайся! 😉",
    "Естественно! 🌟",
    "Разумеется! 🤓",
    "Без вариантов! 🚀",
    "Определённо да! ✅",
    "Конечно! 😊",
    "Само собой! ⚡",
    "Бесспорно! 🎯",
    "Да, и это не обсуждается! 💪",
    "Ещё бы! 🔥",
    "Без сомнений! 😎",
    "Да, и точка! 🎉",
    "Несомненно! ✨",
    "Да, конечно! 🌈",
    "А как иначе! 💥"
]

# Словарь для хранения счетчиков сообщений по чатам
message_counters: Dict[int, int] = {}
# Словарь для хранения порогов отправки комплиментов по чатам
compliment_thresholds: Dict[int, int] = {}


def should_send_compliment(chat_id: int) -> bool:
    """Определяет, стоит ли отправлять комплимент в этом чате"""
    # Инициализация счетчика для нового чата
    if chat_id not in message_counters:
        message_counters[chat_id] = 0
        # Случайный порог между 100 и 150 сообщениями
        compliment_thresholds[chat_id] = random.randint(100, 150)
        return False

    # Увеличиваем счетчик сообщений
    message_counters[chat_id] += 1

    # Проверяем, достигли ли порога
    if message_counters[chat_id] >= compliment_thresholds[chat_id]:
        # Сбрасываем счетчик и устанавливаем новый порог
        message_counters[chat_id] = 0
        compliment_thresholds[chat_id] = random.randint(100, 150)
        return True

    return False


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработчик команды /start"""
    await update.message.reply_text(
        "Привет! Я бот, который реагирует на ключевые слова в сообщениях. "
        "Просто напиши что-нибудь, и я отвечу! 🎯\n"
        "Используй /help для списка команд."
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработчик команды /help"""
    help_text = """
🤖 **Доступные команды:**
/start - Начать работу с ботом
/help - Показать это сообщение
/question - Задать интересный вопрос
/whattodo - Стоит ли это делать?

"""

async def question_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработчик команды /question - задает случайный интересный вопрос"""
    question = random.choice(QUESTIONS)
    await update.message.reply_text(f"🤔 Вопрос для размышления:\n\n{question}")


async def whattodo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработчик команды /whattodo - всегда отвечает 'Да' в разной форме"""
    response = random.choice(YES_RESPONSES)
    await update.message.reply_text(response)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработка входящих сообщений"""
    message_text = update.message.text.lower()
    chat_id = update.message.chat_id
    user_name = update.message.from_user.first_name

    # 1. Случайный комплимент (раз в 100-150 сообщений)
    if should_send_compliment(chat_id):
        compliment = random.choice(COMPLIMENTS)
        await update.message.reply_text(f"{user_name}, {compliment}")
        return

    # 2. Реакция на триггерные слова с вероятностью 40%
    triggered_responses = []
    for trigger, responses in RESPONSES.items():
        if trigger in message_text:
            triggered_responses.extend(responses)

    # Если нашли совпадения, отправляем случайный ответ с вероятностью 40%
    if triggered_responses and random.random() < 0.4:
        response = random.choice(triggered_responses)
        await update.message.reply_text(response)


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработка ошибок"""
    logging.error(f"Ошибка: {context.error}")


def main():
    """Основная функция"""
    application = Application.builder().token(BOT_TOKEN).build()

    # Добавляем обработчики команд
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("question", question_command))
    application.add_handler(CommandHandler("whattodo", whattodo_command))

    # Добавляем обработчик сообщений
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Добавляем обработчик ошибок
    application.add_error_handler(error_handler)

    print("🤖 Бот запущен и готов к работе!")
    application.run_polling()


if __name__ == "__main__":
    main()




